# PostgreSQL StatefulSet for User Whisperer Platform
# High-availability PostgreSQL cluster with streaming replication

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: userwhisperer-prod
  labels:
    app: postgres
    component: database
    tier: data
    version: "15"
spec:
  serviceName: postgres-headless
  replicas: 3
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
        tier: data
        version: "15"
        database-access: "false"  # Postgres doesn't need to access itself
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      priorityClassName: userwhisperer-critical
      serviceAccountName: postgres-sa
      
      # Anti-affinity to spread across nodes
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - postgres
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: cloud.google.com/gke-nodepool
                operator: In
                values:
                - database-pool
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # postgres user
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      
      terminationGracePeriodSeconds: 60
      
      # Init containers
      initContainers:
      - name: setup-permissions
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Setting up permissions for PostgreSQL data directory..."
          if [ ! -d /var/lib/postgresql/data ]; then
            mkdir -p /var/lib/postgresql/data
          fi
          chmod 700 /var/lib/postgresql/data
          chown 999:999 /var/lib/postgresql/data
          echo "Permissions set successfully"
        securityContext:
          runAsUser: 0  # Need root to change ownership
          runAsGroup: 0
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
          requests:
            memory: "64Mi"
            cpu: "50m"
      
      - name: init-db-config
        image: postgres:15-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "Initializing PostgreSQL configuration..."
          
          # Copy base configuration
          cp /etc/postgresql-base/* /etc/postgresql/
          
          # Set replica-specific configuration
          HOSTNAME=$(hostname)
          ORDINAL=${HOSTNAME##*-}
          
          if [ "$ORDINAL" = "0" ]; then
            echo "Configuring as primary"
            echo "primary_conninfo = ''" >> /etc/postgresql/postgresql.conf
          else
            echo "Configuring as replica"
            echo "primary_conninfo = 'host=postgres-0.postgres-headless.userwhisperer-prod.svc.cluster.local port=5432 user=replicator'" >> /etc/postgresql/postgresql.conf
            echo "recovery_target_timeline = 'latest'" >> /etc/postgresql/postgresql.conf
            touch /etc/postgresql/standby.signal
          fi
          
          echo "Configuration complete"
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
        volumeMounts:
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: postgres-base-config
          mountPath: /etc/postgresql-base
          readOnly: true
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
          requests:
            memory: "64Mi"
            cpu: "50m"
      
      containers:
      # Main PostgreSQL container
      - name: postgres
        image: postgres:15-alpine
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        
        env:
        # Basic configuration
        - name: POSTGRES_DB
          value: userwhisperer
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        
        # Replication configuration
        - name: POSTGRES_REPLICATION_MODE
          value: master
        - name: POSTGRES_REPLICATION_USER
          value: replicator
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: replication_password
        
        # Data directory
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        
        # Performance tuning
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=C"
        
        # Replica-specific environment
        - name: POSTGRES_MASTER_SERVICE
          value: postgres-0.postgres-headless.userwhisperer-prod.svc.cluster.local
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # PostgreSQL needs to write to data directory
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
            ephemeral-storage: "1Gi"
          limits:
            cpu: "8"
            memory: "16Gi"
            ephemeral-storage: "5Gi"
        
        # Health checks
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        
        # Graceful shutdown
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - pg_ctl stop -D $PGDATA -m fast
        
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
          readOnly: true
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        - name: tmp
          mountPath: /tmp
      
      # PostgreSQL Exporter for metrics
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.12.0
        ports:
        - name: metrics
          containerPort: 9187
          protocol: TCP
        
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: postgres-exporter-secret
              key: data_source_name
        - name: PG_EXPORTER_DISABLE_SETTINGS_METRICS
          value: "false"
        - name: PG_EXPORTER_AUTO_DISCOVER_DATABASES
          value: "true"
        - name: PG_EXPORTER_EXCLUDE_DATABASES
          value: "template0,template1"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534  # nobody
          runAsGroup: 65534
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        
        resources:
          limits:
            memory: "256Mi"
            cpu: "100m"
          requests:
            memory: "128Mi"
            cpu: "50m"
        
        livenessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 5
          periodSeconds: 5
        
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      
      volumes:
      - name: postgres-base-config
        configMap:
          name: postgres-base-config
          defaultMode: 0444
      - name: postgres-config
        emptyDir: {}
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
          defaultMode: 0555
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
  
  # Volume claim templates
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app: postgres
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: userwhisperer-fast-ssd
      resources:
        requests:
          storage: 500Gi

---
# Headless service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: userwhisperer-prod
  labels:
    app: postgres
    component: database
spec:
  clusterIP: None
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP

---
# Service for PostgreSQL primary (read-write)
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary
  namespace: userwhisperer-prod
  labels:
    app: postgres
    component: database
    role: primary
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app: postgres
    # This will be updated by a controller to point to the current primary
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: 9187
    protocol: TCP

---
# Service for PostgreSQL replicas (read-only)
apiVersion: v1
kind: Service
metadata:
  name: postgres-replicas
  namespace: userwhisperer-prod
  labels:
    app: postgres
    component: database
    role: replica
spec:
  type: ClusterIP
  selector:
    app: postgres
    # This will exclude the primary pod
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP

---
# Service account for PostgreSQL
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-sa
  namespace: userwhisperer-prod
  labels:
    app: postgres
    component: database

---
# Role for PostgreSQL operations
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: postgres-role
  namespace: userwhisperer-prod
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["postgres-secret", "postgres-exporter-secret"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]

---
# Role binding for PostgreSQL
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: postgres-role-binding
  namespace: userwhisperer-prod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: postgres-role
subjects:
- kind: ServiceAccount
  name: postgres-sa
  namespace: userwhisperer-prod

---
# Pod Disruption Budget for PostgreSQL
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-pdb
  namespace: userwhisperer-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: postgres
