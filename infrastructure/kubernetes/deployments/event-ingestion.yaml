# Event Ingestion Service - Production Kubernetes Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: event-ingestion
  namespace: user-whisperer
  labels:
    app: event-ingestion
    component: service
    version: "1.0.0"
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "High-throughput event processing service"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: event-ingestion
  template:
    metadata:
      labels:
        app: event-ingestion
        component: service
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: user-whisperer-service-account
      imagePullSecrets:
        - name: docker-registry-secret
      
      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        
      # Init Container for Database Migration
      initContainers:
        - name: db-migration
          image: userwhisperer/event-ingestion:latest
          command: ["node", "scripts/run-migrations.js"]
          envFrom:
            - configMapRef:
                name: user-whisperer-config
            - secretRef:
                name: user-whisperer-secrets
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      
      containers:
        - name: event-ingestion
          image: userwhisperer/event-ingestion:latest
          imagePullPolicy: Always
          
          ports:
            - name: http
              containerPort: 3001
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          
          # Environment Variables
          envFrom:
            - configMapRef:
                name: user-whisperer-config
            - secretRef:
                name: user-whisperer-secrets
          
          env:
            - name: SERVICE_NAME
              value: "event-ingestion"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          
          # Resource Limits
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1
              memory: 2Gi
          
          # Health Checks
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          
          startupProbe:
            httpGet:
              path: /health/live
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          
          # Security Context
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          
          # Volume Mounts
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache
            - name: logs
              mountPath: /app/logs
            - name: ca-certificates
              mountPath: /etc/ssl/certs/ca-certificates.crt
              subPath: ca.crt
              readOnly: true
      
      # Pod Volumes
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir:
            sizeLimit: 1Gi
        - name: logs
          emptyDir:
            sizeLimit: 2Gi
        - name: ca-certificates
          secret:
            secretName: ca-certificates
            defaultMode: 0644
      
      # Pod Disruption Budget
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - event-ingestion
                topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      - arm64
      
      # Tolerations for dedicated nodes
      tolerations:
        - key: "app"
          operator: "Equal"
          value: "user-whisperer"
          effect: "NoSchedule"
      
      # DNS Configuration
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Service for Event Ingestion
apiVersion: v1
kind: Service
metadata:
  name: event-ingestion-service
  namespace: user-whisperer
  labels:
    app: event-ingestion
    component: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3001"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3001
      targetPort: http
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: metrics
      protocol: TCP
  selector:
    app: event-ingestion

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: event-ingestion-pdb
  namespace: user-whisperer
  labels:
    app: event-ingestion
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: event-ingestion

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: event-ingestion-hpa
  namespace: user-whisperer
  labels:
    app: event-ingestion
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: event-ingestion
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 25
          periodSeconds: 60