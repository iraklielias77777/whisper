# User Whisperer Platform - Secrets Template
# IMPORTANT: Replace all placeholder values with actual secrets before deployment

apiVersion: v1
kind: Secret
metadata:
  name: user-whisperer-secrets
  namespace: user-whisperer
  labels:
    app: user-whisperer
    component: secrets
type: Opaque
stringData:
  # Database Credentials
  POSTGRES_USER: "uwprod"
  POSTGRES_PASSWORD: "CHANGE_ME_STRONG_PASSWORD_123!"
  POSTGRES_URL: "postgresql://uwprod:CHANGE_ME_STRONG_PASSWORD_123!@postgres-service:5432/userwhisperer_prod"
  
  # Redis Password
  REDIS_PASSWORD: "CHANGE_ME_REDIS_PASSWORD_456!"
  REDIS_URL: "redis://:CHANGE_ME_REDIS_PASSWORD_456!@redis-service:6379"
  
  # External API Keys
  OPENAI_API_KEY: "sk-CHANGE_ME_OPENAI_API_KEY"
  ANTHROPIC_API_KEY: "sk-ant-CHANGE_ME_ANTHROPIC_API_KEY"
  
  # Email Service (SendGrid)
  SENDGRID_API_KEY: "SG.CHANGE_ME_SENDGRID_API_KEY"
  SENDGRID_FROM_EMAIL: "noreply@userwhisperer.com"
  
  # SMS Service (Twilio)
  TWILIO_ACCOUNT_SID: "CHANGE_ME_TWILIO_ACCOUNT_SID"
  TWILIO_AUTH_TOKEN: "CHANGE_ME_TWILIO_AUTH_TOKEN"
  TWILIO_PHONE_NUMBER: "+1234567890"
  
  # Push Notifications (Firebase)
  FIREBASE_PROJECT_ID: "user-whisperer-prod"
  FIREBASE_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nCHANGE_ME_FIREBASE_PRIVATE_KEY\n-----END PRIVATE KEY-----"
  FIREBASE_CLIENT_EMAIL: "firebase-adminsdk@user-whisperer-prod.iam.gserviceaccount.com"
  
  # JWT Secrets
  JWT_SECRET: "CHANGE_ME_JWT_SECRET_VERY_LONG_RANDOM_STRING_789"
  JWT_REFRESH_SECRET: "CHANGE_ME_JWT_REFRESH_SECRET_DIFFERENT_LONG_STRING_012"
  
  # Encryption Keys
  ENCRYPTION_KEY: "CHANGE_ME_32_CHAR_ENCRYPTION_KEY_345"
  HMAC_SECRET: "CHANGE_ME_HMAC_SECRET_FOR_SIGNATURES_678"
  
  # API Gateway
  KONG_API_KEY: "prod_api_key_CHANGE_ME_SECURE_RANDOM_STRING"
  
  # Monitoring & Analytics
  ANALYTICS_API_KEY: "CHANGE_ME_ANALYTICS_API_KEY"
  
  # Google Cloud (if using GCP services)
  GOOGLE_CLOUD_PROJECT: "user-whisperer-prod"
  GOOGLE_APPLICATION_CREDENTIALS: |
    {
      "type": "service_account",
      "project_id": "user-whisperer-prod",
      "private_key_id": "CHANGE_ME",
      "private_key": "-----BEGIN PRIVATE KEY-----\nCHANGE_ME_GOOGLE_PRIVATE_KEY\n-----END PRIVATE KEY-----",
      "client_email": "service-account@user-whisperer-prod.iam.gserviceaccount.com",
      "client_id": "CHANGE_ME_CLIENT_ID",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token"
    }

---
# TLS Certificates Secret
apiVersion: v1
kind: Secret
metadata:
  name: user-whisperer-tls
  namespace: user-whisperer
  labels:
    app: user-whisperer
    component: tls
type: kubernetes.io/tls
stringData:
  # Replace with actual TLS certificate and private key
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    CHANGE_ME_TLS_CERTIFICATE_CONTENT
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    CHANGE_ME_TLS_PRIVATE_KEY_CONTENT
    -----END PRIVATE KEY-----

---
# Docker Registry Secret (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: user-whisperer
  labels:
    app: user-whisperer
    component: registry
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "your-registry.com": {
          "username": "CHANGE_ME_REGISTRY_USERNAME",
          "password": "CHANGE_ME_REGISTRY_PASSWORD",
          "auth": "CHANGE_ME_BASE64_ENCODED_USERNAME_PASSWORD"
        }
      }
    }

---
# Database Migration Secret
apiVersion: v1
kind: Secret
metadata:
  name: db-migration-secret
  namespace: user-whisperer
  labels:
    app: user-whisperer
    component: migration
type: Opaque
stringData:
  # Database Admin Credentials for Migrations
  DB_ADMIN_USER: "postgres"
  DB_ADMIN_PASSWORD: "CHANGE_ME_DB_ADMIN_PASSWORD"
  DB_ADMIN_URL: "postgresql://postgres:CHANGE_ME_DB_ADMIN_PASSWORD@postgres-service:5432/postgres"

---
# Monitoring Secrets
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: user-whisperer
  labels:
    app: monitoring
    component: secrets
type: Opaque
stringData:
  # Grafana Admin Credentials
  GF_SECURITY_ADMIN_USER: "admin"
  GF_SECURITY_ADMIN_PASSWORD: "CHANGE_ME_GRAFANA_ADMIN_PASSWORD"
  
  # Prometheus Basic Auth (if enabled)
  PROMETHEUS_USERNAME: "prometheus"
  PROMETHEUS_PASSWORD: "CHANGE_ME_PROMETHEUS_PASSWORD"
  
  # Jaeger Authentication (if enabled)
  JAEGER_USERNAME: "jaeger"
  JAEGER_PASSWORD: "CHANGE_ME_JAEGER_PASSWORD"
  
  # Slack Webhook for Alerts
  SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/CHANGE/ME/WEBHOOK_URL"
  
  # PagerDuty Integration Key
  PAGERDUTY_INTEGRATION_KEY: "CHANGE_ME_PAGERDUTY_KEY"

---
# Certificate Authority Secret
apiVersion: v1
kind: Secret
metadata:
  name: ca-certificates
  namespace: user-whisperer
  labels:
    app: user-whisperer
    component: ca-certs
type: Opaque
stringData:
  # Internal CA Certificate for service-to-service communication
  ca.crt: |
    -----BEGIN CERTIFICATE-----
    CHANGE_ME_INTERNAL_CA_CERTIFICATE
    -----END CERTIFICATE-----
  ca.key: |
    -----BEGIN PRIVATE KEY-----
    CHANGE_ME_INTERNAL_CA_PRIVATE_KEY
    -----END PRIVATE KEY-----
