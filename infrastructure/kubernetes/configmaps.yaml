# User Whisperer Platform - Configuration Maps
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-whisperer-config
  namespace: user-whisperer
  labels:
    app: user-whisperer
    component: config
data:
  # Application Configuration
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  
  # Database Configuration
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "userwhisperer_prod"
  
  # Redis Configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  
  # Message Queue Configuration
  PUBSUB_PROJECT_ID: "user-whisperer-prod"
  
  # Service Ports
  EVENT_INGESTION_PORT: "3001"
  BEHAVIORAL_ANALYSIS_PORT: "3002"
  DECISION_ENGINE_PORT: "3003"
  CONTENT_GENERATION_PORT: "3004"
  CHANNEL_ORCHESTRATOR_PORT: "3005"
  AI_ORCHESTRATION_PORT: "3006"
  
  # Kong Configuration
  KONG_PROXY_PORT: "8000"
  KONG_ADMIN_PORT: "8001"
  
  # Monitoring Configuration
  METRICS_ENABLED: "true"
  PROMETHEUS_PORT: "9090"
  GRAFANA_PORT: "3000"
  JAEGER_PORT: "16686"
  
  # Rate Limiting
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_WINDOW_MS: "60000"
  RATE_LIMIT_MAX_REQUESTS: "1000"
  
  # Feature Flags
  SERVICE_DISCOVERY_ENABLED: "true"
  HEALTH_CHECKS_ENABLED: "true"
  TRACING_ENABLED: "true"
  
  # Security
  CORS_ORIGINS: "https://app.userwhisperer.com,https://admin.userwhisperer.com"
  ALLOWED_HOSTS: "userwhisperer.com,*.userwhisperer.com"

---
# Kong Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-config
  namespace: user-whisperer
  labels:
    app: kong
    component: config
data:
  kong.yml: |
    _format_version: "3.0"
    
    services:
      - name: event-ingestion
        url: http://event-ingestion-service:3001
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 3
        tags:
          - userwhisperer
          - event-ingestion
    
      - name: behavioral-analysis
        url: http://behavioral-analysis-service:3002
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 3
        tags:
          - userwhisperer
          - behavioral-analysis
    
      - name: decision-engine
        url: http://decision-engine-service:3003
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 3
        tags:
          - userwhisperer
          - decision-engine
    
      - name: content-generation
        url: http://content-generation-service:3004
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 3
        tags:
          - userwhisperer
          - content-generation
    
      - name: channel-orchestrator
        url: http://channel-orchestrator-service:3005
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 3
        tags:
          - userwhisperer
          - channel-orchestrator
    
      - name: ai-orchestration
        url: http://ai-orchestration-service:3006
        connect_timeout: 60000
        write_timeout: 60000
        read_timeout: 60000
        retries: 3
        tags:
          - userwhisperer
          - ai-orchestration
    
    routes:
      # Public API Routes
      - name: event-track
        service: event-ingestion
        paths:
          - /v1/events/track
        methods:
          - POST
        strip_path: false
        tags:
          - public-api
          - events
    
      - name: event-batch
        service: event-ingestion
        paths:
          - /v1/events/batch
        methods:
          - POST
        strip_path: false
        tags:
          - public-api
          - events
    
      # Health Check Routes
      - name: health-event-ingestion
        service: event-ingestion
        paths:
          - /health/event-ingestion
        methods:
          - GET
        strip_path: true
        tags:
          - health
    
    plugins:
      # Global Rate Limiting
      - name: rate-limiting
        config:
          minute: 1000
          hour: 10000
          day: 100000
          policy: redis
          redis_host: redis-service
          redis_port: 6379
          redis_database: 1
        tags:
          - global
          - rate-limiting
    
      # Global CORS
      - name: cors
        config:
          origins:
            - "https://app.userwhisperer.com"
            - "https://admin.userwhisperer.com"
          methods:
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
            - OPTIONS
          headers:
            - Accept
            - Accept-Version
            - Content-Length
            - Content-Type
            - Date
            - X-Auth-Token
            - X-API-Key
            - Authorization
          credentials: true
          max_age: 3600
        tags:
          - global
          - cors
    
      # API Key Authentication
      - name: key-auth
        route: event-track
        config:
          key_names:
            - X-API-Key
            - apikey
          key_in_header: true
          hide_credentials: true
        tags:
          - authentication
    
    consumers:
      - username: production-client
        custom_id: prod-client-001
        tags:
          - production
    
    keyauth_credentials:
      - consumer: production-client
        key: "${KONG_API_KEY}"
        tags:
          - production

---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: user-whisperer
  labels:
    app: prometheus
    component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
    
      # User Whisperer Services
      - job_name: 'user-whisperer-services'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - user-whisperer
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
    
      # Kong Gateway
      - job_name: 'kong'
        static_configs:
          - targets: ['kong-service:8001']
        metrics_path: '/metrics'
    
      # Node Exporter
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

  # Alerting Rules
  alert-rules.yml: |
    groups:
      - name: user-whisperer-alerts
        rules:
          - alert: ServiceDown
            expr: up{job=~"user-whisperer-services"} == 0
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "Service {{ $labels.kubernetes_name }} is down"
              description: "Service {{ $labels.kubernetes_name }} in namespace {{ $labels.kubernetes_namespace }} has been down for more than 2 minutes."
    
          - alert: HighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High error rate detected"
              description: "Error rate is above 10% for {{ $labels.service }}"
    
          - alert: HighLatency
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 0.5
            for: 10m
            labels:
              severity: warning
            annotations:
              summary: "High latency detected"
              description: "95th percentile latency is above 500ms for {{ $labels.service }}"
    
          - alert: DatabaseConnectionHigh
            expr: postgres_connections_active / postgres_connections_max > 0.8
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Database connection usage high"
              description: "Database connection usage is above 80%"

---
# Grafana Dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: user-whisperer
  labels:
    app: grafana
    component: dashboards
data:
  user-whisperer-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "User Whisperer Platform Overview",
        "tags": ["user-whisperer", "overview"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Service Health",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"user-whisperer-services\"}",
                "legendFormat": "{{ kubernetes_name }}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            }
          },
          {
            "id": 2,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total[5m])",
                "legendFormat": "{{ service }} - {{ method }}"
              }
            ]
          },
          {
            "id": 3,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket[5m]))",
                "legendFormat": "50th percentile"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
